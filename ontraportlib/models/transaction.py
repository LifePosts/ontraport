# -*- coding: utf-8 -*-

"""
    ontraportlib.models.transaction
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2017
"""
import  ontraportlib.models.offer
import  ontraportlib.models.address
import  ontraportlib.models.payer
import  ontraportlib.models.base_model

class Transaction(ontraportlib.models.base_model.BaseModel):

    """Implementation of the 'Transaction' model.

    TODO: type model description here.

    Attributes:
        charge_now (ChargeNow25Enum): Charge Transaction now or or just log a
            Transaction.
        contact_id (int): Create new Transaction for this Object instance
            (Contact ID).
        gateway_id (int): Gateway ID to use for this Transaction.
        invoice_template (int): Invoice ID to use for this Transaction.
        offer (Offer): TODO: type description here.
        billing_address (Address): TODO: type description here.
        payer (Payer): TODO: type description here.
        trans_date (int): Timestamp (in milliseconds since midnight 1/1/1970)
            of the Transaction.

    """

    def __init__(self, 
                 charge_now = None,
                 contact_id = None,
                 gateway_id = None,
                 invoice_template = None,
                 offer = None,
                 billing_address = None,
                 payer = None,
                 trans_date = None):
        """Constructor for the Transaction class"""
        
        # Initialize members of the class
        self.charge_now = charge_now
        self.contact_id = contact_id
        self.gateway_id = gateway_id
        self.invoice_template = invoice_template
        self.offer = offer
        self.billing_address = billing_address
        self.payer = payer
        self.trans_date = trans_date

        # Create a mapping from Model property names to API property names
        self.names = {
            "charge_now" : "chargeNow",
            "contact_id" : "contact_id",
            "gateway_id" : "gateway_id",
            "invoice_template" : "invoice_template",
            "offer" : "offer",
            "billing_address" : "billing_address",
            "payer" : "payer",
            "trans_date" : "trans_date",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            charge_now = dictionary.get("chargeNow")
            contact_id = dictionary.get("contact_id")
            gateway_id = dictionary.get("gateway_id")
            invoice_template = dictionary.get("invoice_template")
            offer = ontraportlib.models.offer.Offer.from_dictionary(dictionary.get("offer")) if dictionary.get("offer") else None
            billing_address = ontraportlib.models.address.Address.from_dictionary(dictionary.get("billing_address")) if dictionary.get("billing_address") else None
            payer = ontraportlib.models.payer.Payer.from_dictionary(dictionary.get("payer")) if dictionary.get("payer") else None
            trans_date = dictionary.get("trans_date")
            # Return an object of this model
            return cls(charge_now,
                       contact_id,
                       gateway_id,
                       invoice_template,
                       offer,
                       billing_address,
                       payer,
                       trans_date)
