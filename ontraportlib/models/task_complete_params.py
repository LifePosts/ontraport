# -*- coding: utf-8 -*-

"""
    ontraportlib.models.task_complete_params
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2017
"""
import  ontraportlib.models.criteria
import  ontraportlib.models.task_data
import  ontraportlib.models.base_model

class TaskCompleteParams(ontraportlib.models.base_model.BaseModel):

    """Implementation of the 'TaskCompleteParams' model.

    TODO: type model description here.

    Attributes:
        criteria (Criteria): TODO: type description here.
        data (TaskData): TODO: type description here.

    """

    def __init__(self, 
                 criteria = None,
                 data = None):
        """Constructor for the TaskCompleteParams class"""
        
        # Initialize members of the class
        self.criteria = criteria
        self.data = data

        # Create a mapping from Model property names to API property names
        self.names = {
            "criteria" : "criteria",
            "data" : "data",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            criteria = ontraportlib.models.criteria.Criteria.from_dictionary(dictionary.get("criteria")) if dictionary.get("criteria") else None
            data = ontraportlib.models.task_data.TaskData.from_dictionary(dictionary.get("data")) if dictionary.get("data") else None
            # Return an object of this model
            return cls(criteria,
                       data)
