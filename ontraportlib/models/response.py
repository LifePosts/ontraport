# -*- coding: utf-8 -*-

"""
    ontraportlib.models.response
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2017
"""
import  ontraportlib.models.notification
import  ontraportlib.models.update
import  ontraportlib.models.base_model

class Response(ontraportlib.models.base_model.BaseModel):

    """Implementation of the 'Response' model.

    TODO: type model description here.

    Attributes:
        account_id (int): TODO: type description here.
        code (int): TODO: type description here.
        data (object): TODO: type description here.
        notifications (Notification): TODO: type description here.
        updates (Update): TODO: type description here.

    """

    def __init__(self, 
                 account_id = None,
                 code = None,
                 data = None,
                 notifications = None,
                 updates = None):
        """Constructor for the Response class"""
        
        # Initialize members of the class
        self.account_id = account_id
        self.code = code
        self.data = data
        self.notifications = notifications
        self.updates = updates

        # Create a mapping from Model property names to API property names
        self.names = {
            "account_id" : "account_id",
            "code" : "code",
            "data" : "data",
            "notifications" : "notifications",
            "updates" : "updates",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            account_id = dictionary.get("account_id")
            code = dictionary.get("code")
            data = dictionary.get("data")
            notifications = ontraportlib.models.notification.Notification.from_dictionary(dictionary.get("notifications")) if dictionary.get("notifications") else None
            updates = ontraportlib.models.update.Update.from_dictionary(dictionary.get("updates")) if dictionary.get("updates") else None
            # Return an object of this model
            return cls(account_id,
                       code,
                       data,
                       notifications,
                       updates)
