# -*- coding: utf-8 -*-

"""
    ontraportlib.models.task_followup
 
    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 11/14/2017
"""
import  ontraportlib.models.base_model

class TaskFollowup(ontraportlib.models.base_model.BaseModel):

    """Implementation of the 'TaskFollowup' model.

    TODO: type model description here.

    Attributes:
        due_date (int): Due date of new Task, given as number of days from
            current date.
        message_id (int): Message ID of new Task to be created for further
            followup. This Task must currently exist. New tasks can be created
            using the <a
            href="http://api.ontraport.com/doc/#!/objects/createObject">Objects
            Create endpoint</a> with objectID=1.
        task_owner (int): New Task assignee.

    """

    def __init__(self, 
                 due_date = None,
                 message_id = None,
                 task_owner = None):
        """Constructor for the TaskFollowup class"""
        
        # Initialize members of the class
        self.due_date = due_date
        self.message_id = message_id
        self.task_owner = task_owner

        # Create a mapping from Model property names to API property names
        self.names = {
            "due_date" : "due_date",
            "message_id" : "message_id",
            "task_owner" : "task_owner",
        }


    @classmethod
    def from_dictionary(cls, 
                        dictionary):
        """Creates an instance of this model from a dictionary
       
        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.
            
        Returns:
            object: An instance of this structure class.
            
        """
        if dictionary == None:
            return None
        else:
            # Extract variables from the dictionary
            due_date = dictionary.get("due_date")
            message_id = dictionary.get("message_id")
            task_owner = dictionary.get("task_owner")
            # Return an object of this model
            return cls(due_date,
                       message_id,
                       task_owner)
