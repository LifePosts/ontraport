# -*- coding: utf-8 -*-

"""
    ontraportlib.controllers.transactions_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 11/14/2017
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..models.response import Response
from ..exceptions.api_exception import APIException

class TransactionsController(BaseController):

    """A Controller to access Endpoints in the ontraportlib API."""
    

    def update_convert_to_collections(self,
                                      id):
        """Does a PUT request to /transaction/convertToCollections.

        TODO: type endpoint description here.

        Args:
            id (int): ID of Object.

        Returns:
            Response: Response from the API. Successfully converted
                transaction

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/convertToCollections'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'id': id
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error converting transaction', _context)
        elif _context.response.status_code == 404:
            raise APIException('Object not found', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def update_convert_to_decline(self,
                                  id):
        """Does a PUT request to /transaction/convertToDecline.

        TODO: type endpoint description here.

        Args:
            id (int): ID of Object.

        Returns:
            Response: Response from the API. Successfully converted
                transaction

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/convertToDecline'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'id': id
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error converting transaction', _context)
        elif _context.response.status_code == 404:
            raise APIException('Object not found', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def update_mark_paid(self,
                         id):
        """Does a PUT request to /transaction/markPaid.

        TODO: type endpoint description here.

        Args:
            id (int): ID of Object.

        Returns:
            Response: Response from the API. Successfully marked as paid

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/markPaid'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'id': id
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error marking Transaction as paid', _context)
        elif _context.response.status_code == 404:
            raise APIException('Object not found', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def get_order(self,
                  id):
        """Does a GET request to /transaction/order.

        TODO: type endpoint description here.

        Args:
            id (int): Order ID.

        Returns:
            Response: Response from the API. Success fetching Order

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/order'
        _query_url = APIHelper.clean_url(_query_builder)
        _query_parameters = {
            'id': id
        }

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error fetching Order', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def update_set_order(self,
                         order):
        """Does a PUT request to /transaction/order.

        Update information about an Order. Please note that if offer data is
        omitted, this Order will be deleted.

        Args:
            order (Order): Order Object.

        Returns:
            Response: Response from the API. Successfully updated Order
                information

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/order'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(order))
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error updating Order information', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def create_process_manual(self,
                              transaction):
        """Does a POST request to /transaction/processManual.

        This will create a Transaction for a Contact. Please note that this
        request requires valid parameters for all associated members of the
        Transaction or the request will fail. If you have doubled-checked all
        parameters and the request is still failing, check that the payload
        JSON format is correct by using <a
        href="http://jsonlint.com/">JSONLint</a>. If credit card and billing
        information already exist for this contact, you may omit
        <b>billing_address</b> and <b>payer</b> from the request. Note that
        <b>trans_date</b> is given in milliseconds elapsed since midnight on
        1/1/1970.

        Args:
            transaction (Transaction): Definition of the Transaction.

        Returns:
            Response: Response from the API. Successfully created transaction

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/processManual'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(transaction))
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error processing transaction', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def update_refund(self,
                      criteria):
        """Does a PUT request to /transaction/refund.

        TODO: type endpoint description here.

        Args:
            criteria (Criteria): Criteria of Transactions to refund.

        Returns:
            Response: Response from the API. Successfully refunded
                transaction

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/refund'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(criteria))
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error refunding transaction', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def create_rerun(self,
                     criteria):
        """Does a POST request to /transaction/rerun.

        Re-run a single Transaction or a Group of Transactions that are
        currently in Collections.

        Args:
            criteria (Criteria): Criteria of Transactions to rerun.

        Returns:
            Response: Response from the API. Successfully reran transaction

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/rerun'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(criteria))
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error rerunning transaction', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def update_rerun_commission(self,
                                criteria):
        """Does a PUT request to /transaction/rerunCommission.

        TODO: type endpoint description here.

        Args:
            criteria (Criteria): Criteria of Transactions to rerun
                commissions.

        Returns:
            Response: Response from the API. Successfully reran commission

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/rerunCommission'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(criteria))
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error rerunning commission', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def create_resend_invoice(self,
                              criteria):
        """Does a POST request to /transaction/resendInvoice.

        TODO: type endpoint description here.

        Args:
            criteria (Criteria): Criteria of Transactions to resend invoices.

        Returns:
            Response: Response from the API. Successfully created transaction

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/resendInvoice'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(criteria))
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error processing transaction', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def update_void_transaction(self,
                                criteria):
        """Does a PUT request to /transaction/void.

        TODO: type endpoint description here.

        Args:
            criteria (Criteria): Criteria of Transactions to void.

        Returns:
            Response: Response from the API. Successfully voided transaction

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/void'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(criteria))
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error voiding transaction', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def update_void_purchase(self,
                             id):
        """Does a PUT request to /transaction/voidPurchase.

        TODO: type endpoint description here.

        Args:
            id (int): ID of Object.

        Returns:
            Response: Response from the API. Successfully voided purchase

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/voidPurchase'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'id': id
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error voiding purchase', _context)
        elif _context.response.status_code == 404:
            raise APIException('Object not found', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)

    def update_write_off(self,
                         id):
        """Does a PUT request to /transaction/writeOff.

        TODO: type endpoint description here.

        Args:
            id (int): ID of Object.

        Returns:
            Response: Response from the API. Successfully wrote off
                transaction

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/transaction/writeOff'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare form parameters
        _form_parameters = {
            'id': id
        }
        _form_parameters = APIHelper.form_encode_parameters(_form_parameters)

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=_form_parameters)
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Error writing off transaction', _context)
        elif _context.response.status_code == 404:
            raise APIException('Object not found', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)
