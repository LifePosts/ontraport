# -*- coding: utf-8 -*-

"""
    ontraportlib.controllers.forms_controller

    This file was automatically generated by APIMATIC BETA v2.0 on 11/14/2017
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..models.response import Response
from ..exceptions.api_exception import APIException

class FormsController(BaseController):

    """A Controller to access Endpoints in the ontraportlib API."""
    

    def get_form(self,
                 id):
        """Does a GET request to /form.

        This will fetch a Form's HTML for a given ID.<br/><b>Note</b>: HTML is
        returned in the <code>data</code> member of the JSON response. As a
        result, the HTML is escaped and you will have to unescape the HTML
        before using it.

        Args:
            id (int): ID of Object.

        Returns:
            Response: Response from the API. Successful object query

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/form'
        _query_url = APIHelper.clean_url(_query_builder)
        _query_parameters = {
            'id': id
        }

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers, query_parameters=_query_parameters)
        _context = self.execute_request(_request)        

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 404:
            raise APIException('Form not found', _context)
        self.validate_response(_context)    

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, Response.from_dictionary)
